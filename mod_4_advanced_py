{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPHEyOOu7AQRDG+GyyZ93YU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jazmine-munoz/mod-4-assignment-templates/blob/main/mod_4_advanced_py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "syGo8zbMq-En"
      },
      "outputs": [],
      "source": [
        "'''Module 4: Individual Programming Assignment 1\n",
        "Parsing Data\n",
        "This assignment covers your ability to manipulate data in Python.\n",
        "'''\n",
        "\n",
        "def relationship_status(from_member, to_member, social_graph):\n",
        "    '''Relationship Status.\n",
        "    15 points.\n",
        "    Let us pretend that you are building a new app.\n",
        "    Your app supports social media functionality, which means that users can have\n",
        "    relationships with other users.\n",
        "    There are two guidelines for describing relationships on this social media app:\n",
        "    1. Any user can follow any other user.\n",
        "    2. If two users follow each other, they are considered friends.\n",
        "    This function describes the relationship that two users have with each other.\n",
        "    Please see \"assignment-4-sample-data.py\" for sample data. The social graph\n",
        "    will adhere to the same pattern.\n",
        "    Parameters\n",
        "    ----------\n",
        "    from_member: str\n",
        "        the subject member\n",
        "    to_member: str\n",
        "        the object member\n",
        "    social_graph: dict\n",
        "        the relationship data    \n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        \"follower\" if fromMember follows toMember,\n",
        "        \"followed by\" if fromMember is followed by toMember,\n",
        "        \"friends\" if fromMember and toMember follow each other,\n",
        "        \"no relationship\" if neither fromMember nor toMember follow each other.\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def relationship_status(from_member, to_member, social_graph):\n",
        "    following = social_graph.get(from_member, {}).get('following', [])\n",
        "    followed_by = [member for member in social_graph if from_member in social_graph.get(member, {}).get('following', [])]\n",
        "    \n",
        "    if to_member in following and to_member in followed_by:\n",
        "        return 'friends'\n",
        "    elif to_member in following:\n",
        "        return 'follower'\n",
        "    elif to_member in followed_by:\n",
        "        return 'followed by'\n",
        "    else:\n",
        "        return 'no relationship'\n",
        "\n",
        "# Sample Code\n",
        "social_graph = {\n",
        "    \"@bongolpoc\":{\"first_name\":\"Joselito\",\n",
        "                  \"last_name\":\"Olpoc\",\n",
        "                  \"following\":[\n",
        "                  ]\n",
        "    },\n",
        "    \"@joaquin\":  {\"first_name\":\"Joaquin\",\n",
        "                  \"last_name\":\"Gonzales\",\n",
        "                  \"following\":[\n",
        "                      \"@chums\",\"@jobenilagan\"\n",
        "                  ]\n",
        "    },\n",
        "    \"@chums\" : {\"first_name\":\"Matthew\",\n",
        "                \"last_name\":\"Uy\",\n",
        "                \"following\":[\n",
        "                    \"@bongolpoc\",\"@miketan\",\"@rudyang\",\"@joeilagan\"\n",
        "                ]\n",
        "    },\n",
        "    \"@jobenilagan\":{\"first_name\":\"Joben\",\n",
        "                   \"last_name\":\"Ilagan\",\n",
        "                   \"following\":[\n",
        "                    \"@eeebeee\",\"@joeilagan\",\"@chums\",\"@joaquin\"\n",
        "                   ]\n",
        "    },\n",
        "    \"@joeilagan\":{\"first_name\":\"Joe\",\n",
        "                  \"last_name\":\"Ilagan\",\n",
        "                  \"following\":[\n",
        "                    \"@eeebeee\",\"@jobenilagan\",\"@chums\"\n",
        "                  ]\n",
        "    },\n",
        "    \"@eeebeee\":  {\"first_name\":\"Elizabeth\",\n",
        "                  \"last_name\":\"Ilagan\",\n",
        "                  \"following\":[\n",
        "                    \"@jobenilagan\",\"@joeilagan\"\n",
        "                  ]\n",
        "    },\n",
        "}\n",
        "\n",
        "result = relationship_status(\"@chums\", \"@jobenilagan\", social_graph)\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QRABNnZxrhT6",
        "outputId": "b10f009c-21d6-45de-db7c-ced9d06ad9ba"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "followed by\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def tic_tac_toe(board):\n",
        "    '''Tic Tac Toe. \n",
        "    15 points.\n",
        "    Tic Tac Toe is a common paper-and-pencil game. \n",
        "    Players must attempt to successfully draw a straight line of their symbol across a grid.\n",
        "    The player that does this first is considered the winner.\n",
        "    This function evaluates a tic tac toe board and returns the winner.\n",
        "    Please see \"assignment-4-sample-data.py\" for sample data. The board will adhere\n",
        "    to the same pattern. The board may by 3x3, 4x4, 5x5, or 6x6. The board will never\n",
        "    have more than one winner. The board will only ever have 2 unique symbols at the same time.\n",
        "    Parameters\n",
        "    ----------\n",
        "    board: list\n",
        "        the representation of the tic-tac-toe board as a square list of lists\n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        the symbol of the winner or \"NO WINNER\" if there is no winner\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass\n"
      ],
      "metadata": {
        "id": "KOwqwbvCt1OB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def tic_tac_toe(board):\n",
        "    for row in board:\n",
        "        if len(set(row)) == 1 and row[0] != '':\n",
        "            return row[0]\n",
        "    for col in range(len(board[0])):\n",
        "        if len(set([board[row][col] for row in range(len(board))])) == 1 and board[0][col] != '':\n",
        "            return board[0][col]\n",
        "    if len(set([board[i][i] for i in range(len(board))])) == 1 and board[0][0] != '':\n",
        "        return board[0][0]\n",
        "    if len(set([board[i][len(board)-i-1] for i in range(len(board))])) == 1 and board[0][len(board)-1] != '':\n",
        "        return board[0][len(board)-1]\n",
        "    return 'NO WINNER'\n",
        "\n",
        "# Sample data\n",
        "board1 = [\n",
        "['X','X','O'],\n",
        "['O','X','O'],\n",
        "['O','','X'],\n",
        "]\n",
        "\n",
        "board2 = [\n",
        "['X','X','O'],\n",
        "['O','X','O'],\n",
        "['','O','X'],\n",
        "]\n",
        "\n",
        "board3 = [\n",
        "['O','X','O'],\n",
        "['','O','X'],\n",
        "['X','X','O'],\n",
        "]\n",
        "\n",
        "board4 = [\n",
        "['X','X','X'],\n",
        "['O','X','O'],\n",
        "['O','','O'],\n",
        "]\n",
        "\n",
        "board5 = [\n",
        "['X','X','O'],\n",
        "['O','X','O'],\n",
        "['X','','O'],\n",
        "]\n",
        "\n",
        "board6 = [\n",
        "['X','X','O'],\n",
        "['O','X','O'],\n",
        "['X','',''],\n",
        "]\n",
        "\n",
        "board7 = [\n",
        "['X','X','O',''],\n",
        "['O','X','O','O'],\n",
        "['X','','','O'],\n",
        "['O','X','','']\n",
        "]\n",
        "\n",
        "# Testing the function\n",
        "print(tic_tac_toe(board1))\n",
        "print(tic_tac_toe(board2))\n",
        "print(tic_tac_toe(board3))\n",
        "print(tic_tac_toe(board4))\n",
        "print(tic_tac_toe(board5))\n",
        "print(tic_tac_toe(board6))\n",
        "print(tic_tac_toe(board7))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I3yCHNgswjad",
        "outputId": "1b878559-2030-41be-9bcc-35fdffa99589"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X\n",
            "X\n",
            "O\n",
            "X\n",
            "O\n",
            "NO WINNER\n",
            "NO WINNER\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def eta(first_stop, second_stop, route_map):\n",
        "    '''ETA. \n",
        "    20 points.\n",
        "    A shuttle van service is tasked to travel along a predefined circlar route.\n",
        "    This route is divided into several legs between stops.\n",
        "    The route is one-way only, and it is fully connected to itself.\n",
        "    This function returns how long it will take the shuttle to arrive at a stop\n",
        "    after leaving another stop.\n",
        "    Please see the sample data file in this same folder for sample data. The route map will\n",
        "    adhere to the same pattern. The route map may contain more legs and more stops,\n",
        "    but it will always be one-way and fully enclosed.\n",
        "    Parameters\n",
        "    ----------\n",
        "    first_stop: str\n",
        "        the stop that the shuttle will leave\n",
        "    second_stop: str\n",
        "        the stop that the shuttle will arrive at\n",
        "    route_map: dict\n",
        "        the data describing the routes\n",
        "    Returns\n",
        "    -------\n",
        "    int\n",
        "        the time it will take the shuttle to travel from first_stop to second_stop\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass\n"
      ],
      "metadata": {
        "id": "vz4ng_Rqyz8K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def eta(first_stop, second_stop, route_map):\n",
        "    current_stop = first_stop\n",
        "    total_time = 0\n",
        "    while current_stop != second_stop:\n",
        "        next_stop = [stop for stop in route_map.keys() if stop[0] == current_stop][0][1]\n",
        "        total_time += route_map[(current_stop, next_stop)]['travel_time_mins']\n",
        "        current_stop = next_stop\n",
        "    return total_time\n",
        "\n",
        "route_map = {\n",
        "    (\"upd\",\"admu\"):{\"travel_time_mins\":10},\n",
        "    (\"admu\",\"dlsu\"):{\"travel_time_mins\":35},\n",
        "    (\"dlsu\",\"upd\"):{\"travel_time_mins\":55},\n",
        "}\n",
        "\n",
        "print(eta(\"upd\", \"dlsu\", route_map))\n",
        "\n",
        "\n",
        "route_map = {\n",
        "    ('a1', 'a2'): {'travel_time_mins': 10},\n",
        "    ('a2', 'b1'): {'travel_time_mins': 10230},\n",
        "    ('b1', 'a1'): {'travel_time_mins': 1},\n",
        "}\n",
        "\n",
        "print(eta(\"a1\", \"b1\", route_map))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "37DEWRYfzqYT",
        "outputId": "6fb4217f-d192-46ec-da6a-03787757594a"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "45\n",
            "10240\n"
          ]
        }
      ]
    }
  ]
}