{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNs7dOsEhMHWLJQ/J97pZuD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jazmine-munoz/mod-4-assignment-templates/blob/main/mod_4_intermediate_py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''Module 3: Individual Programming Assignment 1\n",
        "Thinking Like a Programmer\n",
        "This assignment covers your intermediate proficiency with Python.\n",
        "'''\n",
        "\n",
        "def shift_letter(letter, shift):\n",
        "    '''Shift Letter. \n",
        "    4 points.\n",
        "    \n",
        "    Shift a letter right by the given number.\n",
        "    Wrap the letter around if it reaches the end of the alphabet.\n",
        "    Examples:\n",
        "    shift_letter(\"A\", 0) -> \"A\"\n",
        "    shift_letter(\"A\", 2) -> \"C\"\n",
        "    shift_letter(\"Z\", 1) -> \"A\"\n",
        "    shift_letter(\"X\", 5) -> \"C\"\n",
        "    shift_letter(\" \", _) -> \" \"\n",
        "    *Note: the single underscore `_` is used to acknowledge the presence\n",
        "        of a value without caring about its contents.\n",
        "    Parameters\n",
        "    ----------\n",
        "    letter: str\n",
        "        a single uppercase English letter, or a space.\n",
        "    shift: int\n",
        "        the number by which to shift the letter. \n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        the letter, shifted appropriately, if a letter.\n",
        "        a single space if the original letter was a space.\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass"
      ],
      "metadata": {
        "id": "VJ4vBd1O2YAv"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def shift_letter(letter, shift):\n",
        "    if letter == ' ':\n",
        "        return ' '\n",
        "    else:\n",
        "        # convert the letter to its Unicode code point\n",
        "        letter_code = ord(letter)\n",
        "        # shift the letter by the given amount\n",
        "        shifted_code = letter_code - ord('A') + shift\n",
        "        # wrap around to the beginning of the alphabet if necessary\n",
        "        shifted_code = shifted_code % 26\n",
        "        # convert the shifted code point back to a letter and return it\n",
        "        return chr(shifted_code + ord('A'))\n",
        "\n",
        "# Fake Code\n",
        "print(shift_letter(\"A\", 0))  # \"A\"\n",
        "print(shift_letter(\"A\", 2))  # \"C\"\n",
        "print(shift_letter(\"Z\", 1))  # \"A\"\n",
        "print(shift_letter(\"X\", 5))  # \"C\"\n",
        "print(shift_letter(\" \", '_'))  # \" \""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s_ZtByLU1G63",
        "outputId": "ee5824a6-0c32-4e70-c390-32656003fc02"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A\n",
            "C\n",
            "A\n",
            "C\n",
            " \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def caesar_cipher(message, shift):\n",
        "    '''Caesar Cipher. \n",
        "    6 points.\n",
        "    \n",
        "    Apply a shift number to a string of uppercase English letters and spaces.\n",
        "    Parameters\n",
        "    ----------\n",
        "    message: str\n",
        "        a string of uppercase English letters and spaces.\n",
        "    shift: int\n",
        "        the number by which to shift the letters. \n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        the message, shifted appropriately.\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass"
      ],
      "metadata": {
        "id": "CmvFk8-F41ti"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def caesar_cipher(message, shift):\n",
        "    shifted_message = ''\n",
        "    for letter in message:\n",
        "        if letter == ' ':\n",
        "            shifted_message += ' '\n",
        "        else:\n",
        "            shifted_letter = shift_letter(letter, shift)\n",
        "            shifted_message += shifted_letter\n",
        "    return shifted_message\n",
        "\n",
        "# Fake Code\n",
        "print(caesar_cipher(\"HELLO WORLD\", 3))  # prints \"KHOOR ZRUOG\"\n",
        "print(caesar_cipher(\"GOODBYE WORLD\", 5))  # prints \"LTTIGDJ BTWQI\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C-PqGDrv431p",
        "outputId": "32572f47-702e-49f6-fda9-53ba71c56b33"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KHOOR ZRUOG\n",
            "LTTIGDJ BTWQI\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def shift_by_letter(letter, letter_shift):\n",
        "    '''Shift By Letter. \n",
        "    4 points.\n",
        "    \n",
        "    Shift a letter to the right using the number equivalent of another letter.\n",
        "    The shift letter is any letter from A to Z, where A represents 0, B represents 1, \n",
        "        ..., Z represents 25.\n",
        "    Examples:\n",
        "    shift_by_letter(\"A\", \"A\") -> \"A\"\n",
        "    shift_by_letter(\"A\", \"C\") -> \"C\"\n",
        "    shift_by_letter(\"B\", \"K\") -> \"L\"\n",
        "    shift_by_letter(\" \", _) -> \" \"\n",
        "    Parameters\n",
        "    ----------\n",
        "    letter: str\n",
        "        a single uppercase English letter, or a space.\n",
        "    letter_shift: str\n",
        "        a single uppercase English letter.\n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        the letter, shifted appropriately.\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass"
      ],
      "metadata": {
        "id": "FB_buN3U5WZj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def shift_by_letter(letter, letter_shift):\n",
        "    if letter == ' ':\n",
        "        return ' '\n",
        "    \n",
        "    # Convert the letters to their corresponding ASCII codes\n",
        "    letter_code = ord(letter) - 65\n",
        "    shift_code = ord(letter_shift) - 65\n",
        "    \n",
        "    # Shift the letter code by the shift code, wrapping around if necessary\n",
        "    shifted_code = (letter_code + shift_code) % 26\n",
        "    \n",
        "    # Convert the shifted code back to a letter\n",
        "    shifted_letter = chr(shifted_code + 65)\n",
        "    \n",
        "    return shifted_letter\n",
        "\n",
        "# Fake Code\n",
        "shift_by_letter(\"A\", \"A\")  # output: \"A\"\n",
        "shift_by_letter(\"A\", \"C\")  # output: \"C\"\n",
        "shift_by_letter(\"B\", \"K\")  # output: \"L\"\n",
        "shift_by_letter(\" \", \"A\")  # output: \" \""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "ChlQnFm55Xei",
        "outputId": "3d154195-f826-45eb-f451-7a705e0d9cb1"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "' '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def vigenere_cipher(message, key):\n",
        "    '''Vigenere Cipher. \n",
        "    6 points.\n",
        "    \n",
        "    Encrypts a message using a keyphrase instead of a static number.\n",
        "    Every letter in the message is shifted by the number represented by the \n",
        "        respective letter in the key.\n",
        "    Spaces should be ignored.\n",
        "    Example:\n",
        "    vigenere_cipher(\"A C\", \"KEY\") -> \"K A\"\n",
        "    If needed, the keyphrase is extended to match the length of the key.\n",
        "        If the key is \"KEY\" and the message is \"LONGTEXT\",\n",
        "        the key will be extended to be \"KEYKEYKE\".\n",
        "    Parameters\n",
        "    ----------\n",
        "    message: str\n",
        "        a string of uppercase English letters and spaces.\n",
        "    key: str\n",
        "        a string of uppercase English letters. Will never be longer than the message.\n",
        "        Will never contain spaces.\n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        the message, shifted appropriately.\n",
        "    '''\n",
        "    # Replace `pass` with your code. \n",
        "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
        "    pass"
      ],
      "metadata": {
        "id": "NpH82QdI6Jr5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def vigenere_cipher(message, key):\n",
        "    key = key * (len(message) // len(key) + 1)  # Extend key if necessary\n",
        "    result = \"\"\n",
        "    for i in range(len(message)):\n",
        "        if message[i] == \" \":\n",
        "            result += \" \"\n",
        "        else:\n",
        "            shift = ord(key[i]) - 65\n",
        "            result += shift_letter(message[i], shift)\n",
        "    return result\n",
        "\n",
        "# Fake Code\n",
        "encrypted_message = vigenere_cipher(\"HELLO WORLD\", \"KEY\")\n",
        "print(encrypted_message)  # Prints \"KFAOS YFSOG\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQf38VmD6MsA",
        "outputId": "3ec7a352-3739-49e6-d2c2-ac82069d03e2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RIJVS GSPVH\n"
          ]
        }
      ]
    }
  ]
}