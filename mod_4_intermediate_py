# -*- coding: utf-8 -*-
"""mod-4-intermediate.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EsuNkIfJwlsrJ99mtBU4YBnx7wpbVqeU
"""

'''Module 3: Individual Programming Assignment 1
Thinking Like a Programmer
This assignment covers your intermediate proficiency with Python.
'''

def shift_letter(letter, shift):
    '''Shift Letter. 
    4 points.
    
    Shift a letter right by the given number.
    Wrap the letter around if it reaches the end of the alphabet.
    Examples:
    shift_letter("A", 0) -> "A"
    shift_letter("A", 2) -> "C"
    shift_letter("Z", 1) -> "A"
    shift_letter("X", 5) -> "C"
    shift_letter(" ", _) -> " "
    *Note: the single underscore `_` is used to acknowledge the presence
        of a value without caring about its contents.
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    shift: int
        the number by which to shift the letter. 
    Returns
    -------
    str
        the letter, shifted appropriately, if a letter.
        a single space if the original letter was a space.
    '''
    # Replace `pass` with your code. 
    # Stay within the function. Only use the parameters as input. The function should return your answer.
    pass

def shift_letter(letter, shift):
    if letter == ' ':
        return ' '
    else:
        # convert the letter to its Unicode code point
        letter_code = ord(letter)
        # shift the letter by the given amount
        shifted_code = letter_code - ord('A') + shift
        # wrap around to the beginning of the alphabet if necessary
        shifted_code = shifted_code % 26
        # convert the shifted code point back to a letter and return it
        return chr(shifted_code + ord('A'))

# Fake Code
print(shift_letter("A", 0))  # "A"
print(shift_letter("A", 2))  # "C"
print(shift_letter("Z", 1))  # "A"
print(shift_letter("X", 5))  # "C"
print(shift_letter(" ", '_'))  # " "

def caesar_cipher(message, shift):
    '''Caesar Cipher. 
    6 points.
    
    Apply a shift number to a string of uppercase English letters and spaces.
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    shift: int
        the number by which to shift the letters. 
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    # Replace `pass` with your code. 
    # Stay within the function. Only use the parameters as input. The function should return your answer.
    pass

def caesar_cipher(message, shift):
    shifted_message = ''
    for letter in message:
        if letter == ' ':
            shifted_message += ' '
        else:
            shifted_letter = shift_letter(letter, shift)
            shifted_message += shifted_letter
    return shifted_message

# Fake Code
print(caesar_cipher("HELLO WORLD", 3))  # prints "KHOOR ZRUOG"
print(caesar_cipher("GOODBYE WORLD", 5))  # prints "LTTIGDJ BTWQI"

def shift_by_letter(letter, letter_shift):
    '''Shift By Letter. 
    4 points.
    
    Shift a letter to the right using the number equivalent of another letter.
    The shift letter is any letter from A to Z, where A represents 0, B represents 1, 
        ..., Z represents 25.
    Examples:
    shift_by_letter("A", "A") -> "A"
    shift_by_letter("A", "C") -> "C"
    shift_by_letter("B", "K") -> "L"
    shift_by_letter(" ", _) -> " "
    Parameters
    ----------
    letter: str
        a single uppercase English letter, or a space.
    letter_shift: str
        a single uppercase English letter.
    Returns
    -------
    str
        the letter, shifted appropriately.
    '''
    # Replace `pass` with your code. 
    # Stay within the function. Only use the parameters as input. The function should return your answer.
    pass

def shift_by_letter(letter, letter_shift):
    if letter == ' ':
        return ' '
    
    # Convert the letters to their corresponding ASCII codes
    letter_code = ord(letter) - 65
    shift_code = ord(letter_shift) - 65
    
    # Shift the letter code by the shift code, wrapping around if necessary
    shifted_code = (letter_code + shift_code) % 26
    
    # Convert the shifted code back to a letter
    shifted_letter = chr(shifted_code + 65)
    
    return shifted_letter

# Fake Code
shift_by_letter("A", "A")  # output: "A"
shift_by_letter("A", "C")  # output: "C"
shift_by_letter("B", "K")  # output: "L"
shift_by_letter(" ", "A")  # output: " "

def vigenere_cipher(message, key):
    '''Vigenere Cipher. 
    6 points.
    
    Encrypts a message using a keyphrase instead of a static number.
    Every letter in the message is shifted by the number represented by the 
        respective letter in the key.
    Spaces should be ignored.
    Example:
    vigenere_cipher("A C", "KEY") -> "K A"
    If needed, the keyphrase is extended to match the length of the key.
        If the key is "KEY" and the message is "LONGTEXT",
        the key will be extended to be "KEYKEYKE".
    Parameters
    ----------
    message: str
        a string of uppercase English letters and spaces.
    key: str
        a string of uppercase English letters. Will never be longer than the message.
        Will never contain spaces.
    Returns
    -------
    str
        the message, shifted appropriately.
    '''
    # Replace `pass` with your code. 
    # Stay within the function. Only use the parameters as input. The function should return your answer.
    pass

def vigenere_cipher(message, key):
    key = key * (len(message) // len(key) + 1)  # Extend key if necessary
    result = ""
    for i in range(len(message)):
        if message[i] == " ":
            result += " "
        else:
            shift = ord(key[i]) - 65
            result += shift_letter(message[i], shift)
    return result

# Fake Code
encrypted_message = vigenere_cipher("HELLO WORLD", "KEY")
print(encrypted_message)  # Prints "KFAOS YFSOG"
